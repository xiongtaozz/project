#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
功能描述
"""
from django.db.models.signals import post_syncdb
from demo import models as demo_models


# 初始化数据
def init_data(sender, **kwargs):
    # 学生
    students = (('韩梅梅', '女', '1990-06-11', '95033'),
                ('张全蛋', '男', '1995-08-30', '95034'),
                ('火雷蛋', '男', '1993-10-01', '95035'),
                ('呵呵哒', '女', '1996-01-05', '95033'),
                ('小笼包', '女', '1992-12-12', '95033'),
                ('李狗蛋', '男', '1997-11-11', '95036'),
                ('唐马儒', '男', '1999-05-30', '95035'),
                ('李小花', '女', '1991-11-29', '95033'),
                ('赵铁柱', '男', '1999-09-05', '95034'),
                ('王尼玛', '男', '1979-10-05', '95031'),
                ('DSB', '男', '1989-10-05', '95031'),
                ('李军', '男', '1988-11-05', '95034'))
    for student in students:
        sender.Student.objects.create(sname=student[0], ssex=student[1],
                                      sbirthday=student[2], classno=student[3])

    # 老师
    teachers = (('王思聪', '男', '1985-11-11', '计算机系'),
                ('张旭', '男', '1989-01-11', '电子工程系'),
                ('李旭', '女', '1980-12-11', '英语系'),
                ('陈旭', '女', '1985-09-25', '中文系'),
                ('王旭', '男', '1975-03-13', '化学系'),
                ('毛旭', '男', '1979-07-29', '物理系'),
                ('方旭', '女', '1988-10-11', '美术系'),
                ('桑旭', '男', '1990-06-19', '音乐系'),
                ('臧旭', '男', '1988-12-12', '电子工程系'),
                ('章旭', '女', '1990-08-08', '计算机系'))
    for teacher in teachers:
        sender.Teacher.objects.create(tname=teacher[0], tsex=teacher[1],
                                      tbirthday=teacher[2], depart=teacher[3])

    # 课程
    courses = (('3-105', '计算机导论', 1),
                ('3-245', '电子工程课',2),
                ('3-106', '大学英语',3),
                ('3-107', '大学物理',6),
                ('3-108', '超级化学',5),
                ('3-109', '大学语文',4),
                ('3-244', '美术鉴赏',7),
                ('3-243', '音乐',8),
                ('3-242', '计算机基础',10),
                ('3-241', 'PCB印刷', 9) )

    for course in courses:
        sender.Course.objects.create(cno=course[0], cname=course[1], tno_id=course[2])

    # 成绩
    scores = ((1, '3-105', 99.0),
            (1, '3-106', 75.0),
            (1, '3-245', 85.5),
            (2, '3-105', 75.0),
            (2, '3-244', 85.0),
            (2, '3-243', 95.5),
            (3, '3-107', 60.5),
            (3, '3-108', 65.5),
            (3, '3-109', 60.5),
            (4, '3-105', 88.5),
            (4, '3-107', 90.5),
            (4, '3-109', 95.5),
            (5, '3-105', 78.0),
            (5, '3-245', 66.5),
            (5, '3-108', 93.0),
            (6, '3-242', 81.0),
            (6, '3-243', 77.5),
            (6, '3-241', 90.0),
            (7, '3-242', 67.0),
            (7, '3-241', 83.0),
            (7, '3-245', 71.0),
            (8, '3-105', 90.0),
            (8, '3-108', 96.0),
            (8, '3-106', 99.0),
            (9, '3-107', 80.0),
            (9, '3-245', 70.0),
            (9, '3-244', 60.0),
            (9, '3-105', 79.0),
            (10, '3-244', 66.0),
            (10, '3-106', 76.0),
            (10, '3-106', 86.0),
            (11, '3-244', 95.0),
            (11, '3-107', 86.0),
            (11, '3-108', 96.0),
            (12, '3-243', 76.0),
            (12, '3-241', 66.0),
            (12, '3-106', 56.0))
    for score in scores:
        sender.Score.objects.create(sno_id=score[0], cno_id=score[1], grade=score[2])

    # 选修课程
    optional_courses = ((1, '3-105'),
                        (1, '3-243'),
                        (1, '3-106'),
                        (1, '3-107'),
                        (2, '3-105'),
                        (3, '3-105'),
                        (4, '3-105'),
                        (5, '3-105'),
                        (6, '3-105'),
                        (7, '3-105'),
                        (8, '3-105'),
                        (9, '3-105'),
                        (10, '3-105'))

    for course in optional_courses:
        sender.OptionalCourse.objects.create(sno_id=course[0], cno_id=course[1])

post_syncdb.connect(init_data, sender=demo_models)